{"version":3,"file":"src_app_login_login_module_ts.js","mappings":"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","sources":["./src/app/login/login.module.ts","./src/app/login/loginPage/login.component.ts","./src/app/login/loginPage/login.component.html","./src/app/login/loginStore/login.actions.ts","./src/app/login/loginStore/login.effects.ts","./src/app/login/loginStore/login.reducer.ts","./src/app/login/loginStore/login.state.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DemoMaterialModule } from 'src/app/demo-material-module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { LoginComponent } from './loginPage/login.component';\nimport { LoginReducer } from './loginStore/login.reducer';\nimport { AuthEffects } from './loginStore/login.effects';\n\nexport const loginRoutes: Routes = [{\n    path: '',\n    component: LoginComponent \n    }\n]\n\n@NgModule({\n  declarations: [\n    LoginComponent\n  ],\n  imports: [\n    CommonModule,\n    DemoMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    SharedModule,\n    RouterModule,\n    RouterModule.forChild(loginRoutes),\n    StoreModule.forFeature('login', LoginReducer),\n    EffectsModule.forFeature([AuthEffects]),\n  ]\n})\nexport class LoginModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { LogIn } from '../loginStore/login.actions';\nimport { AppState, LoginError, loginError, Messages } from '../loginStore/login.state';\nimport { AdminsService } from 'src/app/Components/services/admin.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  errorMessage$: Observable<any>;\n  errorMessageList: Messages[];\n  passType: string = \"password\";\n  passTypeBool: boolean=false\n  constructor(private formBuilder: FormBuilder,public service:AdminsService,\n    private router: Router,\n    private store: Store<AppState>) {\n        this.errorMessage$ = this.store.pipe(select(loginError));\n    }\n  loginForm: FormGroup = this.formBuilder.group({\n    username:['',Validators.required],\n    password: ['',Validators.required]\n  });\n  ngOnInit() {    \n    this.errorMessage$.subscribe((state:LoginError) => {\n      this.errorMessageList = state.errorMessage;\n      });\n  }\nsubmit() {\n  if (!this.loginForm.valid) {\n    return;\n  }\n  this.store.dispatch(new LogIn(this.loginForm.value))\n // this.router.navigate(['/admin-list'])\n}\nshow() {\n  if (this.passType == \"password\") {\n    this.passTypeBool=true\n    this.passType = \"text\";\n    \n  } else {\n    this.passTypeBool=false\n    this.passType = \"password\";\n  }\n}\n\n}\n","<div class=\"height-100\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <mat-card fxFlex.gt-xs=\"40\" fxFlex.sm=\"70\">\n        <mat-card-title class=\"text-center\">Login</mat-card-title>\n    <mat-card-content>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\">\n      <p>\n        <mat-form-field>\n          <input type=\"text\" matInput placeholder=\"Username / Email\" formControlName=\"username\">\n          <mat-error *ngIf=\"loginForm.get('username')?.invalid\">Username / Email is required</mat-error>\n        </mat-form-field>\n      </p>\n      <div class=\"left\">\n          <mat-icon  *ngIf =\"passTypeBool\" matTooltip=\"Show / Hide password\" (click)=\"show()\"\n            >visibility</mat-icon\n          >\n          <mat-icon (click)=\"show()\" *ngIf =\"!passTypeBool\">visibility_off</mat-icon>\n        <mat-form-field>\n          <input  type=\"{{ passType }}\" matInput placeholder=\"Password\" formControlName=\"password\">\n          <mat-error *ngIf=\"loginForm.get('password')?.invalid\">Password is required</mat-error>\n        </mat-form-field>\n    </div>\n      <mat-error *ngIf=\"errorMessageList.length\"><span *ngFor=\"let error of errorMessageList\">{{error.message}}</span></mat-error>\n       \n      <div class=\"button\" fxLayoutAlign=\"center center\">\n        <button type=\"submit\" mat-raised-button color=\"primary\">Login</button>\n      </div>\n    \n    </form>\n    </mat-card-content>\n    </mat-card> \n    \n    <!-- <div fxLayout=\"row\" fxFlexFill fxLayout.lt-sm=\"column\" fxLayoutGap=\"16px\">\n      <mat-form-field fxFlex color=\"accent\">\n          <input matInput type=\"text\" placeholder=\"Your first name\" formControlName=\"firstName\">\n      </mat-form-field>\n      <mat-form-field fxFlex color=\"accent\">\n          <input matInput type=\"text\" placeholder=\"Your last name\" formControlName=\"lastName\">\n      </mat-form-field>\n    </div> -->\n    </div>\n","import { Action } from '@ngrx/store';\n\n\nexport enum AuthActionTypes {\n  LOGIN = '[Auth] Login',\n  LOGIN_SUCCESS = '[Auth] Login Success',\n  LOGIN_FAILURE = '[Auth] Login Failure',\n  SIGNUP = '[Auth] Signup',\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\n  LOGOUT = '[Auth] Logout',\n  GET_STATUS = '[Auth] GetStatus'\n}\n\nexport class LogIn implements Action {\n  readonly type = AuthActionTypes.LOGIN;\n  constructor(public payload: any) {}\n}\n\nexport class LogInSuccess implements Action {\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class LogInFailure implements Action {\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class SignUp implements Action {\n  readonly type = AuthActionTypes.SIGNUP;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpSuccess implements Action {\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport class SignUpFailure implements Action {\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\n  constructor(public payload: any) {}\n}\n\nexport class LogOut implements Action {\n  readonly type = AuthActionTypes.LOGOUT;\n}\n\nexport class GetStatus implements Action {\n  readonly type = AuthActionTypes.GET_STATUS;\n}\n\nexport type All =\n  | LogIn\n  | LogInSuccess\n  | LogInFailure\n  | LogOut;\n","import { Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs/Observable';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport { ApiDataService } from 'src/app/Services/api-data.service';\nimport { AuthActionTypes, LogIn, LogInFailure, LogInSuccess } from './login.actions';\nimport { User } from '../model/user';\nimport { of } from 'rxjs';\nimport { AdminsService } from 'src/app/Components/services/admin.service';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { LoginService } from 'src/app/Services/login.service';\n\n@Injectable()\nexport class AuthEffects {\n\n  constructor(\n    private _snackBar: MatSnackBar,\n    private actions: Actions,\n    private authService: ApiDataService,\n    private router: Router,\n    public service:AdminsService,\n    public _service:LoginService\n  ) {}\n\n  @Effect()\n  LogIn: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN),\n    map((action: LogIn) => action),\n    switchMap((action:LogIn) => {\n      return this.authService.httpPost('portalauth','login',action.payload)\n        .pipe(\n          map((user:any) => {\n            this.router.navigate(['admin-list']);\n            this._snackBar.open(\"Login Successful\",\"\",{\"duration\": 2500});\n            localStorage.setItem('_context',user.data.token);\n            localStorage.setItem('currentId',user.data.user._id);\n            this._service.setUserLoggedIn(true);\n            return new LogInSuccess({token: user.data.token, email: user.data.user.email,id:user.data.user.id});\n          \n        }),\n        catchError((error) => {\n          this._snackBar.open(\"Invalid Username / Password Combination\",\"\",{\"duration\": 1000});\n          return of(new LogInFailure(error.error.errors));\n        }))}));\n   \n\n\n//   @Effect({ dispatch: false })\n//   LogInSuccess: Observable<any> = this.actions.pipe(\n//     ofType(AuthActionTypes.LOGIN_SUCCESS),\n//     tap((user) => {\n//       localStorage.setItem('token', user.payload.token);\n//       this.router.navigateByUrl('/');\n//     })\n//   );\n\n//   @Effect({ dispatch: false })\n//   LogInFailure: Observable<any> = this.actions.pipe(\n//     ofType(AuthActionTypes.LOGIN_FAILURE)\n//   );\n\n//   @Effect()\n//   SignUp: Observable<any> = this.actions\n//     .ofType(AuthActionTypes.SIGNUP)\n//     .map((action: SignUp) => action.payload)\n//     .switchMap(payload => {\n//       return this.authService.signUp(payload.email, payload.password)\n//         .map((user) => {\n//           return new SignUpSuccess({token: user.token, email: payload.email});\n//         })\n//         .catch((error) => {\n//           return Observable.of(new SignUpFailure({ error: error }));\n//         });\n//     });\n\n//   @Effect({ dispatch: false })\n//   SignUpSuccess: Observable<any> = this.actions.pipe(\n//     ofType(AuthActionTypes.SIGNUP_SUCCESS),\n//     tap((user) => {\n//       localStorage.setItem('token', user.payload.token);\n//       this.router.navigateByUrl('/');\n//     })\n//   );\n\n//   @Effect({ dispatch: false })\n//   SignUpFailure: Observable<any> = this.actions.pipe(\n//     ofType(AuthActionTypes.SIGNUP_FAILURE)\n//   );\n\n//   @Effect({ dispatch: false })\n//   public LogOut: Observable<any> = this.actions.pipe(\n//     ofType(AuthActionTypes.LOGOUT),\n//     tap((user) => {\n//       localStorage.removeItem('token');\n//     })\n//   );\n\n//   @Effect({ dispatch: false })\n//   GetStatus: Observable<any> = this.actions\n//     .ofType(AuthActionTypes.GET_STATUS)\n//     .switchMap(payload => {\n//       return this.authService.getStatus();\n//     });\n\n}\n","import { Action, combineReducers } from \"@ngrx/store\";\nimport { User } from \"../model/user\";\nimport { All, AuthActionTypes } from \"./login.actions\";\nimport { AppState, LoginError, LoginState } from \"./login.state\";\n\n\nexport const initialState: AppState = {\n      login:{\n      loginState:null,\n      loginError:null\n      }\n    };\nconst loginInitialState : LoginState = {\n  User: null\n}\nconst loginErrorState : LoginError = {\n  errorMessage: []\n};\n// export function LoginReducer(state = initialState, action: All): AppState {\n//   switch (action.type) {\n//     case AuthActionTypes.LOGIN_SUCCESS: {\n//       let LState: LoginState = {\n//         User:\n//         {\n//           token:action.payload.token,\n//           id:action.payload.id,\n//           email:action.payload.email\n//         }\n//       };\n//       return {\n//         ...state,\n//         login:{\n//           loginState: LState,\n//           loginError:null\n//         }\n//       };\n//     }\n//     case AuthActionTypes.LOGIN_FAILURE: {\n//       return {\n//         ...state,\n//         login:{\n//           loginError:null\n//         }\n//       };\n//     }\n   \n//     case AuthActionTypes.LOGOUT: {\n//       return initialState;\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// }\nconst reducers = combineReducers<AppState['login'], any>({\n  loginState(state = loginInitialState, action: All) {\n      \n      switch (action.type) {\n        case AuthActionTypes.LOGIN_SUCCESS: {\n         \n          return {\n            ...state,\n            User:{\n              token:action.payload.token,\n              id:action.payload.id,\n              email:action.payload.email}\n          };\n        }\n        default:\n            return state;\n        }\n  },\n  loginError(state = loginErrorState, action: All) {\n     \n      switch (action.type) {\n          case AuthActionTypes.LOGIN_FAILURE:\n              return {...state,errorMessage:action.payload};\n          default:\n              return state;\n          }\n  },\n\n\n});\n\n\nexport function LoginReducer(s: AppState['login'], a: Action) {\n  return reducers(s, a);\n}","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { User } from \"../model/user\";\n\nexport interface LoginState{\n  User:User\n}\n\nexport interface AppState{\n  login:{\n  loginState: LoginState,\n  loginError: LoginError\n  }\n}\nexport interface LoginError{\n  errorMessage: Messages[];\n}\nexport interface Messages{\n  message:string;\n}\n\n\n//export const selectErrorState = createFeatureSelector<AppState>('loginError');\nexport const TargetState  = (state:AppState)=> state.login;\nexport const loginState = createSelector(TargetState , state => state.loginState);\nexport const loginError = createSelector(TargetState, state => state.loginError);"],"names":[],"sourceRoot":"webpack:///"}